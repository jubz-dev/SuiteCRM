<?php

namespace ContainerDhi89Mo;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/*
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getSecurity_Authenticator_TwoFactor_MainService extends App_KernelProdContainer
{
    /*
     * Gets the private 'security.authenticator.two_factor.main' shared service.
     *
     * @return \Scheb\TwoFactorBundle\Security\Http\Authenticator\TwoFactorAuthenticator
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 3).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'symfony'.\DIRECTORY_SEPARATOR.'security-http'.\DIRECTORY_SEPARATOR.'Authenticator'.\DIRECTORY_SEPARATOR.'AuthenticatorInterface.php';
        include_once \dirname(__DIR__, 3).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'symfony'.\DIRECTORY_SEPARATOR.'security-http'.\DIRECTORY_SEPARATOR.'Authenticator'.\DIRECTORY_SEPARATOR.'InteractiveAuthenticatorInterface.php';
        include_once \dirname(__DIR__, 3).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'scheb'.\DIRECTORY_SEPARATOR.'2fa-bundle'.\DIRECTORY_SEPARATOR.'Security'.\DIRECTORY_SEPARATOR.'Http'.\DIRECTORY_SEPARATOR.'Authenticator'.\DIRECTORY_SEPARATOR.'TwoFactorAuthenticator.php';
        include_once \dirname(__DIR__, 3).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'symfony'.\DIRECTORY_SEPARATOR.'security-http'.\DIRECTORY_SEPARATOR.'Authentication'.\DIRECTORY_SEPARATOR.'AuthenticationFailureHandlerInterface.php';
        include_once \dirname(__DIR__, 3).''.\DIRECTORY_SEPARATOR.'core'.\DIRECTORY_SEPARATOR.'backend'.\DIRECTORY_SEPARATOR.'Security'.\DIRECTORY_SEPARATOR.'TwoFactor'.\DIRECTORY_SEPARATOR.'TwoFactorAuthenticationFailureHandler.php';
        include_once \dirname(__DIR__, 3).''.\DIRECTORY_SEPARATOR.'vendor'.\DIRECTORY_SEPARATOR.'scheb'.\DIRECTORY_SEPARATOR.'2fa-bundle'.\DIRECTORY_SEPARATOR.'Security'.\DIRECTORY_SEPARATOR.'Http'.\DIRECTORY_SEPARATOR.'Authentication'.\DIRECTORY_SEPARATOR.'AuthenticationRequiredHandlerInterface.php';
        include_once \dirname(__DIR__, 3).''.\DIRECTORY_SEPARATOR.'core'.\DIRECTORY_SEPARATOR.'backend'.\DIRECTORY_SEPARATOR.'Security'.\DIRECTORY_SEPARATOR.'TwoFactor'.\DIRECTORY_SEPARATOR.'TwoFactorAuthenticationRequiredHandler.php';

        $a = ($container->services['2fa_success'] ?? $container->load('get2faSuccessService'));

        if (isset($container->privates['security.authenticator.two_factor.main'])) {
            return $container->privates['security.authenticator.two_factor.main'];
        }
        $b = ($container->services['event_dispatcher'] ?? self::getEventDispatcherService($container));

        if (isset($container->privates['security.authenticator.two_factor.main'])) {
            return $container->privates['security.authenticator.two_factor.main'];
        }

        return $container->privates['security.authenticator.two_factor.main'] = new \Scheb\TwoFactorBundle\Security\Http\Authenticator\TwoFactorAuthenticator(($container->privates['security.firewall_config.two_factor.main'] ?? self::getSecurity_FirewallConfig_TwoFactor_MainService($container)), ($container->privates['security.token_storage'] ?? self::getSecurity_TokenStorageService($container)), $a, ($container->services['2fa_failed'] ??= new \App\Security\TwoFactor\TwoFactorAuthenticationFailureHandler()), ($container->services['2fa_required'] ??= new \App\Security\TwoFactor\TwoFactorAuthenticationRequiredHandler()), $b, ($container->services['monolog.logger.security'] ?? self::getMonolog_Logger_SecurityService($container)));
    }
}
